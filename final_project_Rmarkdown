---
title: "Omics Group 2 - Final Project"
author: "Gwen Aubrac, Madeleine Gorman-Asal, Alisha Dziarski, Francesca Lee"
date: "2023-11-08"
output:
  html_document: default
  pdf_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, tidy = TRUE)
```

# Association Between Early Gene Expression Signatures and Yellow Fever Vaccination Antibody Response

Omics Group 2: Gwen Aubrac, Madeleine Gorman-Asal, Alisha Dziarski, Francesca Lee
November 9th, 2023
Dr. Laura Richter, Dr. Boris Hejblum, and Dr. Fleur Mougin

Note: for the plots, please use dev.off() prior to plotting if there are issues. Additionally, for the CIM heatmap plots in the sPLS section, please ensure the plotting window is large enough. 

### Preparing Antibody and metadata
```{r}
antibodyValues <- read_excel("YF_Antibodies_D0D28 Results.xlsx") %>% 
  select(c("Participant ID", "PRNT50", "Log PRNT50","Day Abs Num2"))
antibodyValues<- dplyr::rename(antibodyValues, VisitID = "Day Abs Num2", ParticipantID = "Participant ID", logPRNT50 = "Log PRNT50") 
participants <- unique(antibodyValues$ParticipantID)

antibodyValues_wide <- antibodyValues %>% 
  pivot_wider(id_cols=c("ParticipantID"), names_from = VisitID, values_from = c("PRNT50", "logPRNT50")) %>% 
  rename(PRNT50_Day0 = "PRNT50_0", PRNT50_Day28 = "PRNT50_28", LogPRNT50_Day0 = "logPRNT50_0", LogPRNT50_Day28 = "logPRNT50_28")
antibodyValues_wide$logFold <- antibodyValues_wide$LogPRNT50_Day28 - antibodyValues_wide$LogPRNT50_Day0

antibodyState <- antibodyValues_wide %>% 
  select(c(ParticipantID, LogPRNT50_Day28, LogPRNT50_Day0, logFold))

metadata <- read_excel("DM_YF_metadata.xlsx") %>% 
  dplyr::filter(ParticipantID %in% participants) %>% 
  dplyr::select(c("ParticipantID", "VisitID", "Sample name sample sheet")) %>% 
  dplyr::rename(SampleID = "Sample name sample sheet")
metadata$VisitID <- as.numeric(metadata$VisitID)
metadata$VisitID[metadata$VisitID>28] = 28 
metadata$VisitID[metadata$VisitID==4] = 3
metadata <- left_join(metadata, antibodyState, by = join_by("ParticipantID"))
```


### Sample Description

#### Loading Data and Packages

```{r}
# Loading Required Packages
library(dplyr) # for pipeline functions
library(edgeR) # for gene normalization
library(limma) # for differential expression analysis
library(UpSetR) # for differential expression analysis
library(flashClust) # for dendrogram plots
library(dendextend) # for dendrogram plots
library(readxl) # to read data
library(mixOmics) # for partial least squares regression
library(pls) # for partial least squares regression

# Reading Data
setwd("~/Desktop/OMICS project/omics_project_gr2") # set working directory
raw_genes <- read.csv("DM_raw-counts_transposed.csv")
```

#### Formatting Data

```{r}
# Clean Participant Data
raw_genes <- raw_genes %>% # remove observations from participants with no gene expression data on D0/D1/D3/D28
  dplyr::select (-X13.YF, -X14.YF, -X15.YF, -X16.YF, -X17.YF, -X18.YF, -X19.YF, -X20.YF,
          -X41.YF, -X42.YF, -X43.YF, -X44.YF)
           
new_col_names <- character(0) # rename columns as 'participant'.'day' for easier reading
for (p in 1:18) {
  for (d in c(0, 1, 3, 28)) {
    new_col_names <- c(new_col_names, paste0("P", p, ".D", d))
  }
}
colnames(raw_genes)[2:73] <- new_col_names

# Remove genes that were not observed
genes_no0 <- rowSums(dplyr::select(raw_genes, -dplyr::starts_with("Genes"))) > 0
table(genes_no0)

raw_genes_no0 <- dplyr::filter(raw_genes, genes_no0)
dim(raw_genes_no0)

# Calculate CPM
mycpmfun <- function(x) {
  return((x/sum(x)) * 10^6)
}
cpm <- apply(dplyr::select(raw_genes_no0, -starts_with("Genes")), MARGIN = 2,
             FUN = mycpmfun)
raw_genes_no0_cpm2p <- dplyr::filter(raw_genes_no0, rowSums(cpm > 2) >= 5)
dim(raw_genes_no0_cpm2p)

# Compute TMM Normalization
raw_count_DGE <- DGEList(counts = dplyr::select(raw_genes_no0_cpm2p, -starts_with("Genes")),
                        genes = dplyr::select(raw_genes_no0_cpm2p,
                                                                  starts_with("Genes")))
raw_count_DGE_normfact <- edgeR::calcNormFactors(raw_count_DGE, method = "TMM")

raw_count_DGE_normfact_TMMlog2cpm <- edgeR::cpm(raw_count_DGE_normfact, log = TRUE)

# Merge DGE back with Gene Name Column
normfact_TMM_log2cpm_counts <- as.data.frame(raw_count_DGE_normfact_TMMlog2cpm)
row_names <- raw_genes_no0_cpm2p$Genes
rownames(normfact_TMM_log2cpm_counts) <- row_names
save(normfact_TMM_log2cpm_counts, file = 'normfact_TMM_log2cpm_counts.Rdata')
```

#### Sample Characteristics

```{r}
# Gene Counts Plot: Log2CPM
metadata$VisitID <- factor(metadata$VisitID, levels = c(0, 1, 3, 28))
colors <- c(colors <- c("#800080", "#00008B", "#FF69B4", "#00CED1")
)
bp_col <- colors[as.numeric(metadata$VisitID)]

boxplot(log2(dplyr::select(raw_genes_no0_cpm2p, -starts_with("Genes"))),
        col = as.character(bp_col),
        xlab = "Samples", ylab = "log2(raw counts)", axes = FALSE)
axis(2)
box()
legend("topright", title = "Day", legend = levels(metadata$VisitID), 
       col = c(colors <- c("#800080", "#00008B", "#FF69B4", "#00CED1")
), 
       pch = 15, horiz = FALSE, bg = "white", cex = 0.8)

# Gene Counts Plot: TMM-Normalized Log2CPM
boxplot(raw_count_DGE_normfact_TMMlog2cpm, xlab = "Samples", col = as.character(bp_col),
        ylab = "Normalized log2 cpm", axes = FALSE)
axis(2)
box()
legend("topright", title = "Day", legend = levels(metadata$VisitID), 
       col = c(colors <- c("#800080", "#00008B", "#FF69B4", "#00CED1")
), 
       pch = 15, horiz = FALSE, bg = "white", cex = 0.8)

# Day-Arranged Library Size Plot
lib_size_plot <- metadata %>% 
  mutate (libsize = colSums(dplyr::select(raw_genes_no0_cpm2p, -starts_with("Genes")))) %>%
  group_by (VisitID) %>% 
  arrange (VisitID)

barplot(lib_size_plot$libsize, col=rep(c("#800080","#00008B","#FF69B4","#00CED1"),each=18))
legend("topright", title = "Day", legend = levels(metadata$VisitID), 
       col = c(colors <- c("#800080", "#00008B", "#FF69B4", "#00CED1")
       ), 
       pch = 15, horiz = FALSE, bg = "white", cex = 0.8)

# Participant-Arranged Libsize Plot
barplot(colSums(dplyr::select(raw_genes_no0_cpm2p, -starts_with("Genes"))),
        col = as.character(bp_col), xlab = "Samples", ylab = "Library size", names.arg = "")
axis(2)
box()
legend("topright", title = "Day", legend = levels(metadata$VisitID), 
       col = c(colors <- c("#800080", "#00008B", "#FF69B4", "#00CED1")
), 
       pch = 15, horiz = FALSE, bg = "white", cex = 0.8)
```

#### Dendrogram

```{r}
# Build Dendrograms
deucl_raw <- dist(t(dplyr::select(raw_genes_no0_cpm2p, -starts_with("Genes")))) # raw gene counts
deucl_norm <- dist(t(raw_count_DGE_normfact_TMMlog2cpm)) # TMM-normalized log2cpm gene counts

dend_raw <- as.dendrogram(hclust(deucl_raw, method = "ward")) # using euclidian distance
dend_norm <- as.dendrogram(hclust(deucl_norm, method = "ward")) # and ward method

# Prepare Dendrogram Plots
assign_color <- function(label) { # creating function to color dendrogram by day
  if (grepl("D0", label)) {
    return("#800080")  
  } else if (grepl("D1", label)) {
    return("#00008B") 
  } else if (grepl("D3", label)) {
    return("#FF69B4") 
  } else if (grepl("D28", label)) {
    return("#00CED1") 
  } else {
    return("#000000") 
  }
}

label_colors_raw <- sapply(labels(dend_raw), assign_color) # apply function to dendrograms
label_colors_norm <- sapply(labels(dend_norm), assign_color)
labels_colors(dend_raw) <- label_colors_raw
labels_colors(dend_norm) <- label_colors_norm

# Plot Dengrogram: Raw Gene Counts
plot(dend_raw)
legend("topright", title = "Day", legend = levels(metadata$VisitID), 
       col = c(colors <- c("#800080", "#00008B", "#FF69B4", "#00CED1")
), 
       pch = 15, horiz = FALSE, bg = "white", cex = 0.8)

# Plot Dendrogram: TMM_Normalized Log2CPM Genes
plot(dend_norm)
legend("topright", title = "Day", legend = levels(metadata$VisitID), 
       col = c(colors <- c("#800080", "#00008B", "#FF69B4", "#00CED1")
), 
       pch = 15, horiz = FALSE, bg = "white", cex = 0.8)
```

### Principal Components Analysis

```{r}

```

### Differential Expression Analysis

```{r}
genesDay1_3_normfact <- raw_count_DGE_normfact[,metadata$VisitID %in% c(1, 3)]
design <- as.data.frame(model.matrix(~LogPRNT50_Day28 + LogPRNT50_Day0, data=genesDay1_3_normfact$samples))
samplesDay13 <- metadata %>% 
  filter(VisitID ==3 | VisitID == 1)
samplesDay13 <- samplesDay13$SampleID
design_day13 <- design %>% filter(row.names(design) %in% samplesDay13)
design_day13 <- design_day13 %>% 
  as.matrix()
set.seed(100)
res_dearseq <- dearseq::dear_seq(exprmat=genesDay1_3_normfact$counts, variables2test = design_day13[,"LogPRNT50_Day28", drop = F], covariates = design_day13[,c("(Intercept)", "LogPRNT50_Day0"), drop = F], which_test = "asymptotic", preprocessed = T, sample_group = rep(1:2, each = 18))
summary(res_dearseq)
plot(res_dearseq)
dearseq_signif <- res_dearseq$pvals$adjPval<0.05
geneList_13<- genesDay1_3_normfact$genes$Genes[as.logical(dearseq_signif)]

```

## (Sparse) Partial Least Squares Regression 

```{r}
# Prepare Data
gene_expression_D1 <- normfact_TMM_log2cpm_counts[ , seq(2, ncol(normfact_TMM_log2cpm_counts), by = 4)] # select D1 gene expression from TMM-normalized log2cpm gene counts

antibodies_D0 <- metadata %>% # select antibody levels on D0
  filter (VisitID == 0) %>% # to compute logfold change further down
  dplyr::select (PRNT50, logPRNT50)

antibodies_D28 <- metadata %>% # select antibody levels on D28
  filter (VisitID== 28) %>%
  dplyr::select (PRNT50, logPRNT50)

logfold_change <- metadata$logFold # compute logfold change
  
new_row_names <- character(0) # rename columns as 'participant'.'day' for easier reading
for (p in 1:18) {
  for (d in c(28)) {
    new_row_names <- c(new_row_names, paste0("P", p, ".D", d))
  }
}
rownames(antibodies_D0) <- new_row_names
rownames(antibodies_D28) <- new_row_names

spls_df <- as.data.frame(t(gene_expression_D1)) # preparing dataframe to use for PLS and sPLS
spls_df$D28_logPRNT50 <- antibodies_D28$logPRNT50
spls_df$logfold_change <- logfold_change

# Fit Partial Least Squares Model
plsr_model_log <- plsr(D28_logPRNT50~., data=spls_df, scale=TRUE, validation="CV") # on logPRNT50
summary(plsr_model_log) # using k-fold cross-validation

plsr_model_log2 <- plsr(D28_logPRNT50~., data=spls_df, scale=TRUE, validation="LOO") # on logPRNT50
summary(plsr_model_log2) # using leave-one-out cross-validation

validationplot(plsr_model_log, main = "Cross-Validation Plot for Number of PLS Components and RMSEP using Day 28 logPRNT50", xlab = "root mean-squared error (RMSE)")
validationplot(plsr_model_log, val.type="MSEP") # plot for mean squared error of prediction
validationplot(plsr_model_log, val.type="R2", main = "Cross-Validation Plot for Number of PLS Components and R2 using Day 28 logPRNT50") # plot for R2

plsr_model_logchange <- plsr(logfold_change~., data=spls_df, scale=TRUE, validation="CV") # on log-fold change between D0 and D28
summary(plsr_model_logchange) # using k-fold cross-validation

plsr_model_logchange2 <- plsr(logfold_change~., data=spls_df, scale=TRUE, validation="LOO") # on log-fold change between D0 and D28
summary(plsr_model_logchange) # using leave-one-out cross-validation

validationplot(plsr_model_logchange, main = "Cross-Validation Plot for Number of PLS Components and RMSEP using Log-fold Change Between Day 0 and Day 28", xlab = "root mean-squared error (RMSE)") # plot for root mean squared error of prediction
validationplot(plsr_model_logchange, val.type="MSEP") # plot for mean squared error of prediction
validationplot(plsr_model_logchange, val.type="R2", main = "Cross-Validation Plot for Number of PLS Components and R2 using Log-fold Change Between Day 0 and Day 28") # plot for R2

# Fit Sparse Partial Least Squares Model
X <- spls_df %>% dplyr::select(-D28_logPRNT50, -logfold_change) # explanatory matrix as gene expression on day 1
Ylog <- as.vector(spls_df$D28_logPRNT50) # outcome vector Ylog as logRPNT50 on D28
Ylogchange <- as.vector(spls_df$logfold_change) # outcome vector Ylogchange as log-fold change between D0 and D28
p <- ncol(X); p
n <- nrow(X); n
r <- 5 # determined that a good number of components is 5 in previous steps
splsda_log <- splsda(X, Ylog, ncomp = r, keepX = rep(5, r)) # fit sPLS model for logPRNT50
splsda_logchange <- splsda(X, Ylogchange, ncomp = r, keepX = rep(5, r)) # fit sPLS model for log-fold change

# Plot Results of sPLS models: Y as logPRNT50
multiplot <- function(..., plotlist=NULL, cols) { # using this function from Winston Chang's R cookbook to put plots side by side
  require(grid)
  
  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)
  
  numPlots = length(plots)
  
  # Make the panel
  plotCols = cols                          # Number of columns of plots
  plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
  
  # Set up the page
  grid.newpage()
  pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
  vplayout <- function(x, y)
    viewport(layout.pos.row = x, layout.pos.col = y)
  
  # Make each plot, in the correct location
  for (i in 1:numPlots) {
    curRow = ceiling(i/plotCols)
    curCol = (i-1) %% plotCols + 1
    print(plots[[i]], vp = vplayout(curRow, curCol ))
  }
  
}

colfunc <- colorRampPalette(c("#ADD8E6", "#000080"))(7) # not sure why only 7 values needed

plotlog1 <- plotIndiv(splsda_log, 
          rep.space = "X-variate", 
          title = 'sPLS on X-variate', legend = TRUE, col = colfunc, pch = 16, legend.title = 
          "logPRNT50 values")
plotlog2 <- plotIndiv(splsda_log, 
          rep.space = "Y-variate", 
          title = 'sPLS on Y-variate', legend = TRUE, col = colfunc, pch = 16, legend.title = 
          "logPRNT50 values")
multiplot(plotlog1, plotlog2, cols=2)

plotIndiv(splsda_log, 
          rep.space = "XY-variate",  
          title = 'sPLS on LogPRNT50 at Day 28 and Gene Expression at Day 1 on XY-Variate Space',
          legend = TRUE, col = colfunc, pch = 16, legend.title = 
          "logPRNT50 values")

plotVar(splsda_log, comp=1:2, title = "Correlation Circle Plot: LogPRNT50 on Day 28 and Gene Expression at Day 1")

# Plot Results for sPLS: Y as log-fold change
colfunc2 <- colorRampPalette(c("#ADD8E6", "#000080"))(14)

plotlogchange1 <- plotIndiv(splsda_logchange, 
          rep.space = "X-variate", 
          title = 'sPLS on X-variate', legend = TRUE, col = colfunc2, pch = 16, legend.title = 
          "log-fold change values")
plotlogchange2 <- plotIndiv(splsda_logchange, 
          rep.space = "Y-variate", 
          title = 'sPLS on Y-variate', legend = TRUE, col = colfunc2, pch = 16, legend.title = 
          "log-fold change values")
multiplot(plotlogchange1, plotlogchange2, cols=2)

plotIndiv(splsda_logchange, 
          rep.space = "XY-variate",  
          title = 'sPLS on Log-fold Change and Gene Expression at Day 1 on XY-Variate Space',
          legend = TRUE, col = colfunc2, pch = 16, legend.title = 
          "log-fold change values")

plotVar(splsda_logchange, comp=1:2, title = "Correlation Circle Plot: Log-fold and Gene Expression at Day 1")

# Plot CIM Heatmaps
colfunc3 <- colorRampPalette(c("#ADD8E6", "#000080"))(18)

legend=list(legend = c(min(Ylog), max(Ylog)),
            col = c("#ADD8E6", "#000080"), # set of colors
            title = "LogPRNT50 on Day 28 (gradient)", # legend title
            cex = 0.7) # legend size

cim(splsda_log, title="D1 Gene expression and Day 28 LogPRNT50",
    margins = c(7, 5), legend = legend, row.sideColors = colfunc3)

legend2=list(legend = c(min(Ylogchange), max(Ylogchange)), # min and max Ylogchange
            col = c("#ADD8E6", "#000080"), # set of colors
            title = "Log-fold PRNT50 change (gradient)", # legend title
            cex = 0.7) # legend size

cim(splsda_logchange, title="D1 Gene expression and Log-fold PRNT50 Change",
    margins = c(7, 5), legend = legend2)
```
